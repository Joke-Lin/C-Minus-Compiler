< "/* compute x! */" , COMMENT >
< "
" , BLANK >
< "int" , RESERVED_WORD >
< " " , BLANK >
< "factorial" , ID >
< "(" , SPECIAL_SYMBOL >
< "int" , RESERVED_WORD >
< " " , BLANK >
< "x" , ID >
< ")" , SPECIAL_SYMBOL >
< "
" , BLANK >
< "{" , SPECIAL_SYMBOL >
< "
	" , BLANK >
< "int" , RESERVED_WORD >
< " " , BLANK >
< "fac" , ID >
< " " , BLANK >
< "=" , SPECIAL_SYMBOL >
< " " , BLANK >
< "1" , NUM >
< ";" , SPECIAL_SYMBOL >
< "
    " , BLANK >
< "fac" , ID >
< " " , BLANK >
< "=" , SPECIAL_SYMBOL >
< " " , BLANK >
< "1" , NUM >
< ";" , SPECIAL_SYMBOL >
< "
	" , BLANK >
< "if" , RESERVED_WORD >
< "(" , SPECIAL_SYMBOL >
< "x" , ID >
< " " , BLANK >
< "<" , SPECIAL_SYMBOL, LT >
< " " , BLANK >
< "0" , NUM >
< ")" , SPECIAL_SYMBOL >
< "
    " , BLANK >
< "{" , SPECIAL_SYMBOL >
< "	" , BLANK >
< "return" , RESERVED_WORD >
< " " , BLANK >
< "1" , NUM >
< ";" , SPECIAL_SYMBOL >
< " " , BLANK >
< "}" , SPECIAL_SYMBOL >
< "
    " , BLANK >
< "if" , RESERVED_WORD >
< "(" , SPECIAL_SYMBOL >
< "x" , ID >
< " " , BLANK >
< "=" , SPECIAL_SYMBOL >
< " " , BLANK >
< "0" , NUM >
< ")" , SPECIAL_SYMBOL >
< "
    " , BLANK >
< "{" , SPECIAL_SYMBOL >
< "
    	" , BLANK >
< "return" , RESERVED_WORD >
< " " , BLANK >
< "1" , NUM >
< ";" , SPECIAL_SYMBOL >
< "
    " , BLANK >
< "}" , SPECIAL_SYMBOL >
< "
    " , BLANK >
< "else" , RESERVED_WORD >
< "
    " , BLANK >
< "{" , SPECIAL_SYMBOL >
< "
		" , BLANK >
< "while" , RESERVED_WORD >
< " " , BLANK >
< "(" , SPECIAL_SYMBOL >
< "x" , ID >
< " " , BLANK >
< ">" , SPECIAL_SYMBOL, GT >
< " " , BLANK >
< "0" , NUM >
< ")" , SPECIAL_SYMBOL >
< "
    	" , BLANK >
< "{" , SPECIAL_SYMBOL >
< " 
    		" , BLANK >
< "fac" , ID >
< " " , BLANK >
< "=" , SPECIAL_SYMBOL >
< " " , BLANK >
< "fac" , ID >
< " " , BLANK >
< "*" , SPECIAL_SYMBOL >
< " " , BLANK >
< "x" , ID >
< ";" , SPECIAL_SYMBOL >
< "
        	" , BLANK >
< "x" , ID >
< " " , BLANK >
< "=" , SPECIAL_SYMBOL >
< " " , BLANK >
< "x" , ID >
< " " , BLANK >
< "-" , SPECIAL_SYMBOL >
< " " , BLANK >
< "1" , NUM >
< ";" , SPECIAL_SYMBOL >
< "
    	" , BLANK >
< "}" , SPECIAL_SYMBOL >
< "
    	" , BLANK >
< "return" , RESERVED_WORD >
< " " , BLANK >
< "fac" , ID >
< ";" , SPECIAL_SYMBOL >
< "
    " , BLANK >
< "}" , SPECIAL_SYMBOL >
< "

" , BLANK >
< "void" , RESERVED_WORD >
< " " , BLANK >
< "main" , ID >
< "(" , SPECIAL_SYMBOL >
< "void" , RESERVED_WORD >
< ")" , SPECIAL_SYMBOL >
< "
" , BLANK >
< "{" , SPECIAL_SYMBOL >
< "	
    " , BLANK >
< "int" , RESERVED_WORD >
< " " , BLANK >
< "x" , ID >
< ";" , SPECIAL_SYMBOL >
< "
    " , BLANK >
< "x" , ID >
< " " , BLANK >
< "=" , SPECIAL_SYMBOL >
< " " , BLANK >
< "input" , ID >
< ";" , SPECIAL_SYMBOL >
< "
    " , BLANK >
< "xFac" , ID >
< " " , BLANK >
< "=" , SPECIAL_SYMBOL >
< " " , BLANK >
< "factorial" , ID >
< "(" , SPECIAL_SYMBOL >
< "x" , ID >
< ")" , SPECIAL_SYMBOL >
< ";" , SPECIAL_SYMBOL >
< "
    " , BLANK >
< "output" , ID >
< "(" , SPECIAL_SYMBOL >
< "xFac" , ID >
< ")" , SPECIAL_SYMBOL >
< ";" , SPECIAL_SYMBOL >
< "
" , BLANK >
< "}" , SPECIAL_SYMBOL >
< "
" , BLANK >
³åÍ» other else : epsilon 

First Set:
additive-expression      ID        NUM       (         
additive-expression`     +         -         epsilon   
addop                    +         -         
arg-list                 ID        NUM       (         
arg-list`                ,         epsilon   
args                     ID        NUM       (         epsilon   
compound-stmt            {         
declaration              int       void      
declaration-list         int       void      
declaration-list`        int       void      epsilon   
declaration`             (         ;         [         
expression               ID        NUM       (         
expression-stmt          ID        NUM       (         ;         
expression`              !=        (         *         +         -         /         <         <=        =         ==        >         >=        [         epsilon   
expression``             !=        *         +         -         /         <         <=        =         ==        >         >=        epsilon   
factor                   ID        NUM       (         
factor`                  (         [         epsilon   
fun-declaration          int       void      
iteration-stmt           while     
local-declarations       int       void      epsilon   
local-declarations`      int       void      epsilon   
mulop                    *         /         
other                    else      epsilon   
parma                    int       void      
parma-list               int       void      
parma-list`              ,         epsilon   
parma`                   [         epsilon   
parmas                   int       void      
parmas`                  ID        epsilon   
program                  int       void      
relop                    !=        <         <=        ==        >         >=        
return-stmt              return    
return-stmt`             ID        NUM       (         ;         
selection-stmt           if        
simple-expression        ID        NUM       (         
simple-expression`       !=        <         <=        ==        >         >=        epsilon   
statement                ID        NUM       if        return    while     (         ;         {         
statement-list           ID        NUM       if        return    while     (         ;         {         epsilon   
statement-list`          ID        NUM       if        return    while     (         ;         {         epsilon   
term                     ID        NUM       (         
term`                    *         /         epsilon   
type-specifier           int       void      
var-declaration          int       void      
var-declaration`         ;         [         
var`                     [         epsilon   

Follow Set:
additive-expression      !=        )         ,         ;         <         <=        ==        >         >=        ]         
additive-expression`     !=        )         ,         ;         <         <=        ==        >         >=        ]         
addop                    ID        NUM       (         
arg-list                 )         
arg-list`                )         
args                     )         
compound-stmt            ID        NUM       else      if        int       return    void      while     (         ;         {         }         $         
declaration              int       void      $         
declaration-list         $         
declaration-list`        $         
declaration`             int       void      $         
expression               )         ,         ;         ]         
expression-stmt          ID        NUM       else      if        return    while     (         ;         {         }         
expression`              )         ,         ;         ]         
expression``             )         ,         ;         ]         
factor                   !=        )         *         +         ,         -         /         ;         <         <=        ==        >         >=        ]         
factor`                  !=        )         *         +         ,         -         /         ;         <         <=        ==        >         >=        ]         
fun-declaration          
iteration-stmt           ID        NUM       else      if        return    while     (         ;         {         }         
local-declarations       ID        NUM       if        return    while     (         ;         {         }         
local-declarations`      ID        NUM       if        return    while     (         ;         {         }         
mulop                    ID        NUM       (         
other                    ID        NUM       else      if        return    while     (         ;         {         }         
parma                    )         ,         
parma-list               
parma-list`              )         
parma`                   )         ,         
parmas                   )         
parmas`                  )         
program                  $         
relop                    ID        NUM       (         
return-stmt              ID        NUM       else      if        return    while     (         ;         {         }         
return-stmt`             ID        NUM       else      if        return    while     (         ;         {         }         
selection-stmt           ID        NUM       else      if        return    while     (         ;         {         }         
simple-expression        
simple-expression`       )         ,         ;         ]         
statement                ID        NUM       else      if        return    while     (         ;         {         }         
statement-list           }         
statement-list`          }         
term                     !=        )         +         ,         -         ;         <         <=        ==        >         >=        ]         
term`                    !=        )         +         ,         -         ;         <         <=        ==        >         >=        ]         
type-specifier           ID        
var-declaration          ID        NUM       if        int       return    void      while     (         ;         {         }         
var-declaration`         ID        NUM       if        int       return    void      while     (         ;         {         }         $         
var`                     !=        )         *         +         ,         -         /         ;         <         <=        =         ==        >         >=        ]         

Analysis Table
additive-expression <ID,term additive-expression` >	<NUM,term additive-expression` >	<(,term additive-expression` >	
additive-expression`<!=,epsilon >	<),epsilon >	<+,addop term additive-expression` >	<,,epsilon >	<-,addop term additive-expression` >	<;,epsilon >	<<,epsilon >	<<=,epsilon >	<==,epsilon >	<>,epsilon >	<>=,epsilon >	<],epsilon >	
addop               <+,+ >	<-,- >	
arg-list            <ID,expression arg-list` >	<NUM,expression arg-list` >	<(,expression arg-list` >	
arg-list`           <),epsilon >	<,,, expression arg-list` >	
args                <ID,arg-list >	<NUM,arg-list >	<(,arg-list >	<),epsilon >	
compound-stmt       <{,{ local-declarations statement-list } >	
declaration         <int,type-specifier ID declaration` >	<void,type-specifier ID declaration` >	
declaration-list    <int,declaration declaration-list` >	<void,declaration declaration-list` >	
declaration-list`   <int,declaration declaration-list` >	<void,declaration declaration-list` >	<$,epsilon >	
declaration`        <(,( parmas ) compound-stmt >	<;,var-declaration` >	<[,var-declaration` >	
expression          <ID,ID expression` >	<NUM,NUM term` additive-expression` simple-expression` >	<(,( expression ) term` additive-expression` simple-expression` >	
expression-stmt     <ID,expression ; >	<NUM,expression ; >	<(,expression ; >	<;,; >	
expression`         <!=,var` expression`` >	<(,( args ) term` additive-expression` simple-expression` >	<),var` expression`` >	<*,var` expression`` >	<+,var` expression`` >	<,,var` expression`` >	<-,var` expression`` >	</,var` expression`` >	<;,var` expression`` >	<<,var` expression`` >	<<=,var` expression`` >	<=,var` expression`` >	<==,var` expression`` >	<>,var` expression`` >	<>=,var` expression`` >	<[,var` expression`` >	<],var` expression`` >	
expression``        <!=,term` additive-expression` simple-expression` >	<),term` additive-expression` simple-expression` >	<*,term` additive-expression` simple-expression` >	<+,term` additive-expression` simple-expression` >	<,,term` additive-expression` simple-expression` >	<-,term` additive-expression` simple-expression` >	</,term` additive-expression` simple-expression` >	<;,term` additive-expression` simple-expression` >	<<,term` additive-expression` simple-expression` >	<<=,term` additive-expression` simple-expression` >	<=,= expression >	<==,term` additive-expression` simple-expression` >	<>,term` additive-expression` simple-expression` >	<>=,term` additive-expression` simple-expression` >	<],term` additive-expression` simple-expression` >	
factor              <ID,ID factor` >	<NUM,NUM >	<(,( expression ) >	
factor`             <!=,var` >	<(,( args ) >	<),var` >	<*,var` >	<+,var` >	<,,var` >	<-,var` >	</,var` >	<;,var` >	<<,var` >	<<=,var` >	<==,var` >	<>,var` >	<>=,var` >	<[,var` >	<],var` >	
fun-declaration     <int,type-specifier ID ( parmas ) compound-stmt >	<void,type-specifier ID ( parmas ) compound-stmt >	
iteration-stmt      <while,while ( expression ) statement >	
local-declarations  <ID,local-declarations` >	<NUM,local-declarations` >	<if,local-declarations` >	<int,local-declarations` >	<return,local-declarations` >	<void,local-declarations` >	<while,local-declarations` >	<(,local-declarations` >	<;,local-declarations` >	<{,local-declarations` >	<},local-declarations` >	
local-declarations` <ID,epsilon >	<NUM,epsilon >	<if,epsilon >	<int,var-declaration local-declarations` >	<return,epsilon >	<void,var-declaration local-declarations` >	<while,epsilon >	<(,epsilon >	<;,epsilon >	<{,epsilon >	<},epsilon >	
mulop               <*,* >	</,/ >	
other               <ID,epsilon >	<NUM,epsilon >	<else,else statement >	<if,epsilon >	<return,epsilon >	<while,epsilon >	<(,epsilon >	<;,epsilon >	<{,epsilon >	<},epsilon >	
parma               <int,type-specifier ID parma` >	<void,type-specifier ID parma` >	
parma-list          <int,parma parma-list` >	<void,parma parma-list` >	
parma-list`         <),epsilon >	<,,, parma parma-list` >	
parma`              <),epsilon >	<,,epsilon >	<[,[ ] >	
parmas              <int,int ID parma` parma-list` >	<void,void parmas` >	
parmas`             <ID,ID parma` parma-list` >	<),epsilon >	
program             <int,declaration-list >	<void,declaration-list >	
relop               <!=,!= >	<<,< >	<<=,<= >	<==,== >	<>,> >	<>=,>= >	
return-stmt         <return,return return-stmt` >	
return-stmt`        <ID,expression ; >	<NUM,expression ; >	<(,expression ; >	<;,; >	
selection-stmt      <if,if ( expression ) statement other >	
simple-expression   <ID,additive-expression simple-expression` >	<NUM,additive-expression simple-expression` >	<(,additive-expression simple-expression` >	
simple-expression`  <!=,relop additive-expression >	<),epsilon >	<,,epsilon >	<;,epsilon >	<<,relop additive-expression >	<<=,relop additive-expression >	<==,relop additive-expression >	<>,relop additive-expression >	<>=,relop additive-expression >	<],epsilon >	
statement           <ID,expression-stmt >	<NUM,expression-stmt >	<if,selection-stmt >	<return,return-stmt >	<while,iteration-stmt >	<(,expression-stmt >	<;,expression-stmt >	<{,compound-stmt >	
statement-list      <ID,statement-list` >	<NUM,statement-list` >	<if,statement-list` >	<return,statement-list` >	<while,statement-list` >	<(,statement-list` >	<;,statement-list` >	<{,statement-list` >	<},statement-list` >	
statement-list`     <ID,statement statement-list` >	<NUM,statement statement-list` >	<if,statement statement-list` >	<return,statement statement-list` >	<while,statement statement-list` >	<(,statement statement-list` >	<;,statement statement-list` >	<{,statement statement-list` >	<},epsilon >	
term                <ID,factor term` >	<NUM,factor term` >	<(,factor term` >	
term`               <!=,epsilon >	<),epsilon >	<*,mulop factor term` >	<+,epsilon >	<,,epsilon >	<-,epsilon >	</,mulop factor term` >	<;,epsilon >	<<,epsilon >	<<=,epsilon >	<==,epsilon >	<>,epsilon >	<>=,epsilon >	<],epsilon >	
type-specifier      <int,int >	<void,void >	
var-declaration     <int,type-specifier ID var-declaration` >	<void,type-specifier ID var-declaration` >	
var-declaration`    <;,; >	<[,[ NUM ] ; >	
var`                <!=,epsilon >	<),epsilon >	<*,epsilon >	<+,epsilon >	<,,epsilon >	<-,epsilon >	</,epsilon >	<;,epsilon >	<<,epsilon >	<<=,epsilon >	<=,epsilon >	<==,epsilon >	<>,epsilon >	<>=,epsilon >	<[,[ expression ] >	<],epsilon >	
Æ¥Åä²úÉúÊ½: program->declaration-list 
Æ¥Åä²úÉúÊ½: declaration-list->declaration declaration-list` 
Æ¥Åä²úÉúÊ½: declaration->type-specifier ID declaration` 
Æ¥Åä²úÉúÊ½: type-specifier->int 
Æ¥Åä: int
Æ¥Åä: ID
Æ¥Åä²úÉúÊ½: declaration`->( parmas ) compound-stmt 
Æ¥Åä: (
Æ¥Åä²úÉúÊ½: parmas->int ID parma` parma-list` 
Æ¥Åä: int
Æ¥Åä: ID
Æ¥Åä²úÉúÊ½: parma`->epsilon 
Æ¥Åä²úÉúÊ½: parma-list`->epsilon 
Æ¥Åä: )
Æ¥Åä²úÉúÊ½: compound-stmt->{ local-declarations statement-list } 
Æ¥Åä: {
Æ¥Åä²úÉúÊ½: local-declarations->local-declarations` 
Æ¥Åä²úÉúÊ½: local-declarations`->var-declaration local-declarations` 
Æ¥Åä²úÉúÊ½: var-declaration->type-specifier ID var-declaration` 
Æ¥Åä²úÉúÊ½: type-specifier->int 
Æ¥Åä: int
Æ¥Åä: ID
var-declaration` : = ´íÎóÏî
res.first: 9
__lex_list.size(): 90
Æ¥ÅäÊ§°Ü
